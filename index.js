if (typeof web3 !== 'undefined') {
  web3 = new Web3(web3.currentProvider);
} else {
  // set the provider you want from Web3.providers
  web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
}

var greeterSource = 'contract mortal { address owner; function mortal() { owner = msg.sender; } function kill() { if (msg.sender == owner) suicide(owner); } } contract greeter is mortal { string greeting; function greeter(string _greeting) public { greeting = _greeting; } function greet() constant returns (string) { return greeting; } }';
var greeterCompiled = web3.eth.compile.solidity(greeterSource);
var code = greeterCompiled.greeter.code;
// contract json abi, this is autogenerated using solc CLI
var abi = greeterCompiled.greeter.info.abiDefinition;
web3.eth.defaultAccount = web3.eth.accounts[0];
web3.personal.unlockAccount(web3.eth.defaultAccount, "cibilan demo test");

var myContract;

function createGreeterContract() {
    // hide create button
    document.getElementById('create').style.visibility = 'hidden'; 
    document.getElementById('code').innerText = code;

    // let's assume that coinbase is our account

    var greetingMessage = document.getElementById("greeter_message").value;
    if (!greetingMessage) {
        alert("Please enter a valid greeting message");
        return;
    }
    // create contract
    document.getElementById('status').innerText = "transaction sent, waiting for confirmation";
    var greeterContract = web3.eth.contract(abi).new(greetingMessage, 
        {from: web3.eth.defaultAccount,
         data: code,
         gas: 300000}, function (err, contract) {
        if(err) {
            console.error(err);
            alert("error");
            return;

        // callback fires twice, we only want the second call when the contract is deployed
        } else if(contract.address){

            myContract = contract;
            console.log('address: ' + myContract.address);
            // document.getElementById('status').innerText = 'Mined!';
            // document.getElementById('call').style.visibility = 'visible';
            console.log("printing from output of contract", greeterContract.greet());
            
        }
    });

}

function callGreeterContract() {
    // this should be generated by ethereum

    // call the contract
    var greeter = web3.eth.contract([{constant:false,inputs:[],name:'kill',outputs:[],type:'function'},{constant:true,inputs:[],name:'greet',outputs:[{name:'',type:'string'}],type:'function'},{inputs:[{name:'_greeting',type:'string'}],type:'constructor'}]).at('0x6fea4f9658c90e2267b06b53b3c6b16afdd81c0f');
    console.log(greeter.greet());
}

function killContract(contractAdress) {
    var greeter = web3.eth.contract([{constant:false,inputs:[],name:'kill',outputs:[],type:'function'},{constant:true,inputs:[],name:'greet',outputs:[{name:'',type:'string'}],type:'function'},{inputs:[{name:'_greeting',type:'string'}],type:'constructor'}]).at(contractAdress);
    console.log(greeter.greet());
    greeter.kill.sendTransaction({from: web3.eth.accounts[0]});
}